// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/db/hotelStore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination ./internal/db/mocks/mock_hotelStore.go -source ./internal/db/hotelStore.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/ctchen222/hotel-system/internal/types"
	bson "go.mongodb.org/mongo-driver/bson"
	gomock "go.uber.org/mock/gomock"
)

// MockHotelStore is a mock of HotelStore interface.
type MockHotelStore struct {
	ctrl     *gomock.Controller
	recorder *MockHotelStoreMockRecorder
	isgomock struct{}
}

// MockHotelStoreMockRecorder is the mock recorder for MockHotelStore.
type MockHotelStoreMockRecorder struct {
	mock *MockHotelStore
}

// NewMockHotelStore creates a new mock instance.
func NewMockHotelStore(ctrl *gomock.Controller) *MockHotelStore {
	mock := &MockHotelStore{ctrl: ctrl}
	mock.recorder = &MockHotelStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHotelStore) EXPECT() *MockHotelStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHotelStore) Create(arg0 context.Context, arg1 *types.Hotel) (*types.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*types.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockHotelStoreMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHotelStore)(nil).Create), arg0, arg1)
}

// GetHotelById mocks base method.
func (m *MockHotelStore) GetHotelById(arg0 context.Context, arg1 string) (*types.HotelEmbed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelById", arg0, arg1)
	ret0, _ := ret[0].(*types.HotelEmbed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotelById indicates an expected call of GetHotelById.
func (mr *MockHotelStoreMockRecorder) GetHotelById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelById", reflect.TypeOf((*MockHotelStore)(nil).GetHotelById), arg0, arg1)
}

// GetHotels mocks base method.
func (m *MockHotelStore) GetHotels(ctx context.Context, filter bson.M) ([]*types.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotels", ctx, filter)
	ret0, _ := ret[0].([]*types.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotels indicates an expected call of GetHotels.
func (mr *MockHotelStoreMockRecorder) GetHotels(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotels", reflect.TypeOf((*MockHotelStore)(nil).GetHotels), ctx, filter)
}

// Insert mocks base method.
func (m *MockHotelStore) Insert(arg0 context.Context, arg1 *types.Hotel) (*types.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(*types.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockHotelStoreMockRecorder) Insert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockHotelStore)(nil).Insert), arg0, arg1)
}

// Update mocks base method.
func (m *MockHotelStore) Update(ctx context.Context, params types.HotelUpdateParams, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, params, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockHotelStoreMockRecorder) Update(ctx, params, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHotelStore)(nil).Update), ctx, params, id)
}
