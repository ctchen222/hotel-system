// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ctchen1999/hotel-system/internal/db (interfaces: BookingStore)
//
// Generated by this command:
//
//	mockgen -package mocks -destination ./internal/db/mocks/mock_bookStore.go github.com/ctchen1999/hotel-system/internal/db BookingStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/ctchen222/hotel-system/internal/types"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockBookingStore is a mock of BookingStore interface.
type MockBookingStore struct {
	ctrl     *gomock.Controller
	recorder *MockBookingStoreMockRecorder
	isgomock struct{}
}

// MockBookingStoreMockRecorder is the mock recorder for MockBookingStore.
type MockBookingStoreMockRecorder struct {
	mock *MockBookingStore
}

// NewMockBookingStore creates a new mock instance.
func NewMockBookingStore(ctrl *gomock.Controller) *MockBookingStore {
	mock := &MockBookingStore{ctrl: ctrl}
	mock.recorder = &MockBookingStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingStore) EXPECT() *MockBookingStoreMockRecorder {
	return m.recorder
}

// GetBookings mocks base method.
func (m *MockBookingStore) GetBookings(ctx context.Context, filter primitive.M) ([]*types.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookings", ctx, filter)
	ret0, _ := ret[0].([]*types.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookings indicates an expected call of GetBookings.
func (mr *MockBookingStoreMockRecorder) GetBookings(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookings", reflect.TypeOf((*MockBookingStore)(nil).GetBookings), ctx, filter)
}

// InsertBookRoom mocks base method.
func (m *MockBookingStore) InsertBookRoom(arg0 context.Context, arg1 *types.Booking) (*types.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBookRoom", arg0, arg1)
	ret0, _ := ret[0].(*types.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBookRoom indicates an expected call of InsertBookRoom.
func (mr *MockBookingStoreMockRecorder) InsertBookRoom(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBookRoom", reflect.TypeOf((*MockBookingStore)(nil).InsertBookRoom), arg0, arg1)
}
