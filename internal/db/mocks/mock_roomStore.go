// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/db/roomStore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination ./internal/db/mocks/mock_roomStore.go -source ./internal/db/roomStore.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/ctchen222/hotel-system/internal/types"
	bson "go.mongodb.org/mongo-driver/bson"
	gomock "go.uber.org/mock/gomock"
)

// MockRoomStore is a mock of RoomStore interface.
type MockRoomStore struct {
	ctrl     *gomock.Controller
	recorder *MockRoomStoreMockRecorder
	isgomock struct{}
}

// MockRoomStoreMockRecorder is the mock recorder for MockRoomStore.
type MockRoomStoreMockRecorder struct {
	mock *MockRoomStore
}

// NewMockRoomStore creates a new mock instance.
func NewMockRoomStore(ctrl *gomock.Controller) *MockRoomStore {
	mock := &MockRoomStore{ctrl: ctrl}
	mock.recorder = &MockRoomStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomStore) EXPECT() *MockRoomStoreMockRecorder {
	return m.recorder
}

// GetRooms mocks base method.
func (m *MockRoomStore) GetRooms(ctx context.Context, filter bson.M) ([]*types.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRooms", ctx, filter)
	ret0, _ := ret[0].([]*types.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRooms indicates an expected call of GetRooms.
func (mr *MockRoomStoreMockRecorder) GetRooms(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRooms", reflect.TypeOf((*MockRoomStore)(nil).GetRooms), ctx, filter)
}

// Insert mocks base method.
func (m *MockRoomStore) Insert(arg0 context.Context, arg1 *types.Room) (*types.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(*types.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockRoomStoreMockRecorder) Insert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRoomStore)(nil).Insert), arg0, arg1)
}
